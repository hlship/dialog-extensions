(understand command [tutorial off])

(perform [tutorial off])
    (now) ~(tutorial mode enabled)
    (narrate tutorial disabled)

(narrate tutorial disabled)
    Tutorial mode has been turned off; you can re-enable tutorials with 
    (suggest command [tutorial on]).

(understand command [tutorial on])

(perform [tutorial on])
    (now) (tutorial mode enabled)
    Tutorial mode has been turned on; you can turn it off with 
    (suggest command [tutorial off]).
    %% This is a command, no tick, but it's nice to see a suggestion pop up immediately
    %% (if any are applicable).
    (make tutorial suggestion)

(late on every tick)
    (tutorial mode enabled)
    ~(make suggestion after performance)
    (make tutorial suggestion)
 
(late on every tick)
    (now) ~(suggestion $ was just performed)

(make suggestion after performance)
    (suggestion $Suggestion was just performed)
    %% This is clumsy, but keeps each narrate after from having to supply the (par)
    %% and brackets.
    (collect words)
       (after performance suggest $Suggestion)
    (into $Output)
    ~(empty $Output)
    (par)
    \[ (after performance suggest $Suggestion) \]

(interface (enable tutorial mode))

(enable tutorial mode)
    (now) (tutorial mode enabled)
    (tutorial intro)

(tutorial intro)
    (par)
    \[
    This game has a built-in tutorial mode for players new to interactive fiction;
    it suggests common commands that you can try.  You can turn this off with
    (suggest command [tutorial off])
    or back on with (suggest command [tutorial on]). \]

(interface (can perform $<Suggestion with $>Operand))
(interface (after performance suggest $<Suggestion))
(interface (suggest command $<Action))
(interface (print suggested command $<Action))

(suggest command $Action)
    (library links enabled)
    (span @bold) {
        (link) (print suggested command $Action)
    }

(suggest command $Action)
    (print suggested command $Action)

(print suggested command $Action)
    (exhaust) {
        *($Word is one of $Action)
        (command word $Word)
    }

(make tutorial suggestion)
    *(tutorial suggestion $Suggestion)
    ~($Suggestion has been performed)
    ~($Suggestion has been suggested)
    (can perform $Suggestion with $Operand)
    (par)
    \[(suggest $Suggestion with $Operand)\]
    (now) ($Suggestion has been suggested)

(global variable (suggestion $ was just performed))

(after $Action)
    ~(suggestion $ was just performed)
    *(tutorial suggestion $Suggestion)
    ~($Suggestion has been performed)
    %% Only want to narrate the after if the suggestion has been made; otherwise
    %% the after is a non-sequitur.
    ($Suggestion has been suggested)
    ($Suggestion is performed by $Action)
    (now) ($Suggestion has been performed)
    (now) (suggestion $Suggestion was just performed)

%% Optional rule for objects that want to override how (suggest command $) operates.

(interface (command word <$Word))

(command word (object $Object))
    (collect words)
        (name $Object)
    (into $NameWords)
    (last $NameWords $Name)
    %% We assume the last word is most significant, and in a tutorial, will
    %% be sufficient to identify the object uniquely.
    $Name

(command word $Any)
    $Any

%% Optional trait that new suggestions should honor.

(interface (ignored by tutorial $<Object))

%% Hidden objects should always be ignored.

(ignored by tutorial ($ is hidden))